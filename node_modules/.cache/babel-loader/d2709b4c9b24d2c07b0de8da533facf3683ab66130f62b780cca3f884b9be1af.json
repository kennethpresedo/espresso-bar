{"ast":null,"code":"import { getToken } from './users-service';\nexport default async function sendRequest(url) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n  let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  // Fetch takes an optional options object as the 2nd argument\n  // used to include a data payload, set headers, etc.\n  const options = {\n    method\n  };\n  if (payload) {\n    options.headers = {\n      'Content-Type': 'application/json'\n    };\n    options.body = JSON.stringify(payload);\n  }\n  const token = getToken();\n  if (token) {\n    // Ensure headers object exists\n    options.headers = options.headers || {};\n    // Add token to an Authorization header\n    // Prefacing with 'Bearer' is recommended in the HTTP specification\n    options.headers.Authorization = `Bearer ${token}`;\n  }\n  const res = await fetch(url, options);\n  // res.ok will be false if the status code set to 4xx in the controller action\n  if (res.ok) return res.json();\n  throw new Error('Bad Request');\n}\n\n// import { getToken } from './users-service'\n\n// export default async function sendRequest (url, method = 'GET', payload = null) {\n//   // Fetch takes an optional options object as the 2nd argument\n//   // used to include a data payload, set headers, etc.\n//   const options = { method }\n//   if (payload) {\n//     options.headers = { 'Content-Type': 'application/json' }\n//     options.body = JSON.stringify(payload)\n//   }\n//   const token = getToken()\n//   if (token) {\n//     // Ensure headers object exists\n//     options.headers = options.headers || {}\n//     // Add token to an Authorization header\n//     // Prefacing with 'Bearer' is recommended in the HTTP specification\n//     options.headers.Authorization = `Bearer ${token}`\n//   }\n//   const res = await fetch(url, options)\n//   // res.ok will be false if the status code set to 4xx in the controller action\n//   if (res.ok) return res.json()\n//   throw new Error('Bad Request')\n// }","map":{"version":3,"names":["getToken","sendRequest","url","method","payload","options","headers","body","JSON","stringify","token","Authorization","res","fetch","ok","json","Error"],"sources":["/Users/kennethpresedo/Desktop/software_homework/unit_3/espresso/src/utilities/send-request.js"],"sourcesContent":["import { getToken } from './users-service';\n\nexport default async function sendRequest(url, method = 'GET', payload = null) {\n  // Fetch takes an optional options object as the 2nd argument\n  // used to include a data payload, set headers, etc.\n  const options = { method };\n  if (payload) {\n    options.headers = { 'Content-Type': 'application/json' };\n    options.body = JSON.stringify(payload);\n  }\n  const token = getToken();\n  if (token) {\n    // Ensure headers object exists\n    options.headers = options.headers || {};\n    // Add token to an Authorization header\n    // Prefacing with 'Bearer' is recommended in the HTTP specification\n    options.headers.Authorization = `Bearer ${token}`;\n  }\n  const res = await fetch(url, options);\n  // res.ok will be false if the status code set to 4xx in the controller action\n  if (res.ok) return res.json();\n  throw new Error('Bad Request');\n}\n\n// import { getToken } from './users-service'\n\n// export default async function sendRequest (url, method = 'GET', payload = null) {\n//   // Fetch takes an optional options object as the 2nd argument\n//   // used to include a data payload, set headers, etc.\n//   const options = { method }\n//   if (payload) {\n//     options.headers = { 'Content-Type': 'application/json' }\n//     options.body = JSON.stringify(payload)\n//   }\n//   const token = getToken()\n//   if (token) {\n//     // Ensure headers object exists\n//     options.headers = options.headers || {}\n//     // Add token to an Authorization header\n//     // Prefacing with 'Bearer' is recommended in the HTTP specification\n//     options.headers.Authorization = `Bearer ${token}`\n//   }\n//   const res = await fetch(url, options)\n//   // res.ok will be false if the status code set to 4xx in the controller action\n//   if (res.ok) return res.json()\n//   throw new Error('Bad Request')\n// }"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;AAE1C,eAAe,eAAeC,WAAW,CAACC,GAAG,EAAkC;EAAA,IAAhCC,MAAM,uEAAG,KAAK;EAAA,IAAEC,OAAO,uEAAG,IAAI;EAC3E;EACA;EACA,MAAMC,OAAO,GAAG;IAAEF;EAAO,CAAC;EAC1B,IAAIC,OAAO,EAAE;IACXC,OAAO,CAACC,OAAO,GAAG;MAAE,cAAc,EAAE;IAAmB,CAAC;IACxDD,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC;EACxC;EACA,MAAMM,KAAK,GAAGV,QAAQ,EAAE;EACxB,IAAIU,KAAK,EAAE;IACT;IACAL,OAAO,CAACC,OAAO,GAAGD,OAAO,CAACC,OAAO,IAAI,CAAC,CAAC;IACvC;IACA;IACAD,OAAO,CAACC,OAAO,CAACK,aAAa,GAAI,UAASD,KAAM,EAAC;EACnD;EACA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAACX,GAAG,EAAEG,OAAO,CAAC;EACrC;EACA,IAAIO,GAAG,CAACE,EAAE,EAAE,OAAOF,GAAG,CAACG,IAAI,EAAE;EAC7B,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;AAChC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}